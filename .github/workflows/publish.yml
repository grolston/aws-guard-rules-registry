name: Publish

on:
  push:
    branches:
      - main
env:
  ## publish version for docker image
  VERSION: "1.0.2"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  testRules:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run guard rules tests
      shell: bash
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh
        export PATH=${PATH}:~/.guard/bin
        cfn-guard test -d ./rules/
    ## If test fails run step to pull out only failed tests
    - name: Display Failed Rules Only
      if: ${{ failure() }}
      shell: bash
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh
        export PATH=${PATH}:~/.guard/bin
        cfn-guard test -d ./rules/ | grep "FAIL Rules:" -B 2 -A 1

  buildRuleSet:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - run: |
          python3 ./mappings/build.py -r $VERSION
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: ruleset-build
          path: |
            docker/output/
            mappings/rule_set_guard_rules_registry_all_rules.json
          if-no-files-found: error

  # buildDockerRelease:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out repo
  #       uses: actions/checkout@v2
  #     - run: |
  #         chmod +x ./mappings/build.py
  #         python3 ./mappings/build.py
  #       shell: bash
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.ECR_REGION }}
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #     - name: Build, tag, and push image to Amazon ECR
  #       run: |
  #         aws ecr-public get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
  #         cd ./docker
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .
  #         docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: build mapping
        run: |
          chmod +x ./mappings/build.py
          python3 ./mappings/build.py -r $VERSION
        shell: bash
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Build Inventory Image'
        run: |
          docker build .docker --tag ghcr.io/grolston/aws-guard-rules:latest
          docker push ghcr.io/grolston/aws-guard-rules:latest
